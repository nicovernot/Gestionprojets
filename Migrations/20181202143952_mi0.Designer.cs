// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieContexts.Models;

namespace Medecins.Migrations
{
    [DbContext(typeof(MovieContext))]
    [Migration("20181202143952_mi0")]
    partial class mi0
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024");

            modelBuilder.Entity("Exigeance_Taches.Models.Exigeance_Tache", b =>
                {
                    b.Property<int>("Exigeance_TacheID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ExigeanceID");

                    b.Property<int>("TacheID");

                    b.HasKey("Exigeance_TacheID");

                    b.HasIndex("ExigeanceID");

                    b.HasIndex("TacheID");

                    b.ToTable("Exigeance_Tache");
                });

            modelBuilder.Entity("Exigeances.Models.Exigeance", b =>
                {
                    b.Property<int>("ExigeanceID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ProjetID");

                    b.Property<int>("TypeExigeanceID");

                    b.Property<string>("description")
                        .IsRequired();

                    b.Property<string>("nom")
                        .IsRequired();

                    b.HasKey("ExigeanceID");

                    b.HasIndex("ProjetID");

                    b.HasIndex("TypeExigeanceID");

                    b.ToTable("Exigeance");
                });

            modelBuilder.Entity("Jalons.Models.Jalon", b =>
                {
                    b.Property<int>("JalonID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ProjetiD");

                    b.Property<string>("nom")
                        .IsRequired();

                    b.HasKey("JalonID");

                    b.HasIndex("ProjetiD");

                    b.ToTable("jalon");
                });

            modelBuilder.Entity("Medecins.Models.Medecin", b =>
                {
                    b.Property<int>("MedecinID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("nom");

                    b.Property<string>("prenom");

                    b.HasKey("MedecinID");

                    b.ToTable("Medecins");
                });

            modelBuilder.Entity("Patients.Models.Patient", b =>
                {
                    b.Property<int>("PatientID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("MedecinID");

                    b.Property<DateTime>("datenaissance");

                    b.Property<string>("nom");

                    b.Property<string>("prenom");

                    b.HasKey("PatientID");

                    b.HasIndex("MedecinID");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Projets.Models.Projet", b =>
                {
                    b.Property<int>("ProjetID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("RespID");

                    b.Property<string>("description");

                    b.Property<string>("nom");

                    b.Property<string>("trigrame")
                        .HasMaxLength(3);

                    b.HasKey("ProjetID");

                    b.HasIndex("RespID");

                    b.ToTable("Projets");
                });

            modelBuilder.Entity("Rdvs.Models.Rdv", b =>
                {
                    b.Property<int>("RdvID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateRdv");

                    b.Property<DateTime>("FinDateRdv");

                    b.Property<int>("MedecinId");

                    b.Property<int>("PatientId");

                    b.Property<int>("SalleId");

                    b.HasKey("RdvID");

                    b.HasIndex("MedecinId");

                    b.HasIndex("PatientId");

                    b.HasIndex("SalleId");

                    b.ToTable("Rdvs");
                });

            modelBuilder.Entity("Resps.Models.Resp", b =>
                {
                    b.Property<int>("RespID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("nom");

                    b.HasKey("RespID");

                    b.ToTable("resp");
                });

            modelBuilder.Entity("Salles.Models.Salle", b =>
                {
                    b.Property<int>("SalleID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("nom")
                        .HasColumnName("nom");

                    b.HasKey("SalleID");

                    b.ToTable("salles");
                });

            modelBuilder.Entity("Taches.Models.Tache", b =>
                {
                    b.Property<int>("TacheID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("JalonID");

                    b.Property<int?>("RespsRespID");

                    b.Property<int?>("TachePreceTacheID");

                    b.Property<DateTime?>("datedebuttache");

                    b.Property<DateTime>("datedemarage");

                    b.Property<DateTime?>("datefintache");

                    b.Property<string>("description")
                        .IsRequired();

                    b.Property<int>("nbjours");

                    b.Property<string>("nom")
                        .IsRequired();

                    b.HasKey("TacheID");

                    b.HasIndex("JalonID");

                    b.HasIndex("RespsRespID");

                    b.HasIndex("TachePreceTacheID");

                    b.ToTable("taches");
                });

            modelBuilder.Entity("TypeExigeances.Models.TypeExigeance", b =>
                {
                    b.Property<int>("TypeExigeanceID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ProjetID");

                    b.Property<string>("nom")
                        .IsRequired();

                    b.HasKey("TypeExigeanceID");

                    b.HasIndex("ProjetID");

                    b.ToTable("TypeExigeance");
                });

            modelBuilder.Entity("Exigeance_Taches.Models.Exigeance_Tache", b =>
                {
                    b.HasOne("Exigeances.Models.Exigeance", "Exigeance")
                        .WithMany("Exigeance_Tache")
                        .HasForeignKey("ExigeanceID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Taches.Models.Tache", "Tache")
                        .WithMany("Exigeance_Tache")
                        .HasForeignKey("TacheID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Exigeances.Models.Exigeance", b =>
                {
                    b.HasOne("Projets.Models.Projet", "Projet")
                        .WithMany("Exigeance")
                        .HasForeignKey("ProjetID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TypeExigeances.Models.TypeExigeance", "TypeExigeance")
                        .WithMany("Exigeance")
                        .HasForeignKey("TypeExigeanceID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Jalons.Models.Jalon", b =>
                {
                    b.HasOne("Projets.Models.Projet", "Projet")
                        .WithMany("Jalon")
                        .HasForeignKey("ProjetiD")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Patients.Models.Patient", b =>
                {
                    b.HasOne("Medecins.Models.Medecin", "Medecin")
                        .WithMany()
                        .HasForeignKey("MedecinID");
                });

            modelBuilder.Entity("Projets.Models.Projet", b =>
                {
                    b.HasOne("Resps.Models.Resp", "resp")
                        .WithMany("Projet")
                        .HasForeignKey("RespID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rdvs.Models.Rdv", b =>
                {
                    b.HasOne("Medecins.Models.Medecin", "Medecin")
                        .WithMany("Rdv")
                        .HasForeignKey("MedecinId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Patients.Models.Patient", "Patient")
                        .WithMany("Rdv")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Salles.Models.Salle", "Salle")
                        .WithMany("Rdv")
                        .HasForeignKey("SalleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Taches.Models.Tache", b =>
                {
                    b.HasOne("Jalons.Models.Jalon", "Jalons")
                        .WithMany("Tache")
                        .HasForeignKey("JalonID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Resps.Models.Resp", "Resps")
                        .WithMany("Tache")
                        .HasForeignKey("RespsRespID");

                    b.HasOne("Taches.Models.Tache", "TachePrece")
                        .WithMany()
                        .HasForeignKey("TachePreceTacheID");
                });

            modelBuilder.Entity("TypeExigeances.Models.TypeExigeance", b =>
                {
                    b.HasOne("Projets.Models.Projet", "Projet")
                        .WithMany()
                        .HasForeignKey("ProjetID");
                });
#pragma warning restore 612, 618
        }
    }
}
